<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fotonix &amp; Gizmos (Posts about Programming)</title><link>https://www.fotonixx.com/</link><description></description><atom:link href="https://www.fotonixx.com/categories/cat_programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:ryan@fotonixx.com"&gt;Ryan Frazier&lt;/a&gt; </copyright><lastBuildDate>Sat, 10 Jul 2021 22:06:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Writing an (Overly) Idiomatic Fizzbuzz with Rust</title><link>https://www.fotonixx.com/posts/rust-fizzbuzz/</link><dc:creator>Ryan Frazier</dc:creator><description>&lt;figure&gt;&lt;img src="https://www.fotonixx.com/images/rust_fizzbuzz/preview_image.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;The last few months have been a whirlwind exposure to &lt;a class="reference external" href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;. It started when I was looking for a systems language to speed up pieces of &lt;a class="reference external" href="https://pyrayt.readthedocs.io"&gt;PyRayT&lt;/a&gt; that was more general than &lt;a class="reference external" href="https://cython.org/"&gt;Cython&lt;/a&gt;, but not C/C++ (which I have my own love/hate relationship with). After reading the excellently written &lt;a class="reference external" href="https://doc.rust-lang.org/book/"&gt;Rust Book&lt;/a&gt; I was hooked on the language, using it for a couple CLIs, a &lt;a class="reference external" href="https://github.com/rfrazier716/mongo_warp"&gt;webserver&lt;/a&gt;, and even going through old &lt;a class="reference external" href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; puzzles to get more practice.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="https://i.imgflip.com/5fy2ea.jpg" src="https://i.imgflip.com/5fy2ea.jpg" style="width: 500px;"&gt;
&lt;p class="caption"&gt;This is slowly becoming my reply to all things software related&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This post isn't going to be a gushing review of Rust (though as &lt;a class="reference external" href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;2020's most loved language&lt;/a&gt; you won't be hard pressed to find one of those either). Instead, it's sparked from an article I saw on &lt;a class="reference external" href="https://this-week-in-rust.org/"&gt;This Week in Rust&lt;/a&gt; back in June about writing an &lt;a class="reference external" href="https://shane-o.dev/blog/binary-search-rust"&gt;idiomatic binary search&lt;/a&gt;. The binary search is a well known algorithm, which got me thinking: what's another well known program I could use to practice writing idiomatic code? The answer: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Fizz_buzz"&gt;Fizzbuzz&lt;/a&gt;, the programming puzzle commonly used in interviews to make sure the candidate actually knows what a for loop is.&lt;/p&gt;
&lt;p&gt;In this post I'll be starting with a standard Fizzbuzz solution, and polishing it up to take full advantage of all the features and programming style Rust offers.&lt;/p&gt;
&lt;div class="contents alert alert-primary ml-0 topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#what-makes-code-idiomatic" id="id1"&gt;What Makes Code Idiomatic?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#the-basic-fizzbuzz" id="id2"&gt;The Basic Fizzbuzz&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#make-me-a-match" id="id3"&gt;Make Me a Match&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#getting-idiomatic" id="id4"&gt;Getting Idiomatic&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#idiomatic-testing" id="id5"&gt;Idiomatic Testing???&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#generic-traits-and-monomorphization" id="id6"&gt;Generic Traits and Monomorphization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#going-off-the-deep-end" id="id7"&gt;Going off the Deep End&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#update-why-no-love-for-enum" id="id8"&gt;Update - Why no Love for Enum?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="contents alert alert-primary ml-0 topic" id="quick-links"&gt;
&lt;p class="topic-title"&gt;Quick Links&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#what-makes-code-idiomatic" id="id9"&gt;What Makes Code Idiomatic?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#the-basic-fizzbuzz" id="id10"&gt;The Basic Fizzbuzz&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#make-me-a-match" id="id11"&gt;Make Me a Match&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#getting-idiomatic" id="id12"&gt;Getting Idiomatic&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#idiomatic-testing" id="id13"&gt;Idiomatic Testing???&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#generic-traits-and-monomorphization" id="id14"&gt;Generic Traits and Monomorphization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#going-off-the-deep-end" id="id15"&gt;Going off the Deep End&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#update-why-no-love-for-enum" id="id16"&gt;Update - Why no Love for Enum?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-makes-code-idiomatic"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#id9"&gt;What Makes Code Idiomatic?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before diving into the &lt;em&gt;how&lt;/em&gt;, it's worth covering &lt;em&gt;what&lt;/em&gt; idiomatic code actually is. Outside of coding context, idiomatic means "using, containing, or denoting expressions that are natural to a native speaker." When discussing idiomatic programming, it means the program leverages features unique to the language to accomplish the task. Coming from &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt;, I would hear this as writing "Pythonic" code (list comprehension, generators, etc.).&lt;/p&gt;
&lt;p&gt;Idiomatic Rust should leverage Rust's unique features such as match, traits, iterators, and ownership. Since I'm still learning Rust every day, I use the linter &lt;a class="reference external" href="https://github.com/rust-lang/rust-clippy"&gt;Clippy&lt;/a&gt;, to catch common mistakes and recommend idiomatic alternatives!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-basic-fizzbuzz"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#id10"&gt;The Basic Fizzbuzz&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The goal of Fizzbuzz is simple:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Write a short program that prints each number from 1 to 100 on a new line.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For each multiple of 3, print "Fizz" instead of the number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For each multiple of 5, print "Buzz" instead of the number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For numbers which are multiples of both 3 and 5, print "FizzBuzz" instead of the number.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first bullet screams "for loop" while the next three are conditional (if) statements. With that in mind we'll write our simplest solution relying on a series of if-else statements and the modulo operator.&lt;/p&gt;
&lt;div class="rust-playground"&gt;
    &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=4ab45aafc8a95c02010f84f66aabdaaf"&gt;
        &lt;i class="fas fa-play"&gt;&lt;/i&gt; Run on the Rust Playground
    &lt;/a&gt;
&lt;/div&gt;&lt;pre class="code rust"&gt;&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_8b413aa650ad40b1acebab7db54b0db0-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This gets us the desired output, but there's nothing idiomatic about it. With the exception of &lt;code&gt;..=&lt;/code&gt; (specifies a range "up to and including"), none of Rust's unique features are being used. In fact, it looks almost identical to a solution written in Python! Clearly we can do better.&lt;/p&gt;
&lt;div class="section" id="make-me-a-match"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#id11"&gt;Make Me a Match&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you haven't read &lt;a class="reference external" href="https://doc.rust-lang.org/book/"&gt;Rust Book&lt;/a&gt;, bookmark it right away! It's one of the best introductions to a language I've ever read, and explains not just the core language, but the toolchains surrounding it that make Rust so accessible. One thing the book wastes no time introducing is Rust's &lt;code&gt;match&lt;/code&gt; operator:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Rust has an extremely powerful control flow operator called match that allows you to compare a value against a series of patterns and then execute code based on which pattern matches. Patterns can be made up of literal values, variable names, wildcards, and many other things"&lt;/p&gt;
&lt;p class="attribution"&gt;â&lt;a class="reference external" href="https://doc.rust-lang.org/book/ch06-02-match.html"&gt;The Rust Book Ch. 6-2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's update our basic function to use &lt;code&gt;match&lt;/code&gt; instead of &lt;code&gt;if-else&lt;/code&gt;. We want to match the output of two modulo operators, if they're both zero we'll output &lt;code&gt;Fizzbuzz&lt;/code&gt;, if only one is zero we'll output &lt;code&gt;Fizz&lt;/code&gt; or &lt;code&gt;Buzz&lt;/code&gt; depending on the zero. and if neither are zero we'll simply output the number.&lt;/p&gt;
&lt;div class="rust-playground"&gt;
    &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=49150dcded25e25489d34dae9cfad0a3"&gt;
        &lt;i class="fas fa-play"&gt;&lt;/i&gt; Run on the Rust Playground
    &lt;/a&gt;
&lt;/div&gt;&lt;pre class="code rust"&gt;&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_7fc7720ed8204b66b42e91bec16bfd55-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Now this is starting to look more like Rust! By using &lt;code&gt;match&lt;/code&gt; we're able to eliminate a lot of unnecessary brackets and only have to calculate the modulo once, instead of at every if statement. Since the &lt;code&gt;match&lt;/code&gt; control flow operates from top to bottom, we need the "FizzBuzz" case to be listed first, as both "Fizz" and "Buzz" also satisfy the &lt;code&gt;(0,0)&lt;/code&gt; case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-idiomatic"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#id12"&gt;Getting Idiomatic&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The above code would be more than enough to show an interviewer you passed CS 100, but we want to squeeze every possible idiomatic opportunity out of this function, so our next step will be pulling our logic out of the main function and into a trait. Again referencing the Rust Book:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"A trait tells the Rust compiler about functionality a particular type has and can share with other types. We can use traits to define shared behavior in an abstract way. We can use trait bounds to specify that a generic can be any type that has certain behavior."&lt;/p&gt;
&lt;p class="attribution"&gt;â&lt;a class="reference external" href="https://doc.rust-lang.org/book/ch10-02-traits.html"&gt;The Rust Book Ch. 10-2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Right now we're only going to focus one one small feature of traits: defining sets of methods that can be called on a type (in our case &lt;code&gt;i32&lt;/code&gt;). Our trait &lt;code&gt;Fizzy&lt;/code&gt; will be simple in that it only has one function (also named &lt;code&gt;fizzy&lt;/code&gt;) that accepts a reference to the number and returns a String based on our Fizzbuzz rules.&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_35eac5b8a3fb4b3dae7f0c00497fadf2-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fizzy&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_35eac5b8a3fb4b3dae7f0c00497fadf2-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_35eac5b8a3fb4b3dae7f0c00497fadf2-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Trait definitions only declare the methods, they do not define the actual logic. For that we need to &lt;em&gt;implement&lt;/em&gt; the trait for our selected type. This is as easy as making an &lt;code&gt;impl&lt;/code&gt; for &lt;code&gt;i32&lt;/code&gt; and moving the match statement out of our main function into the &lt;code&gt;fizzy&lt;/code&gt; method. Our new program is shown below with the logic separated out into its own trait.&lt;/p&gt;
&lt;div class="rust-playground"&gt;
    &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=b2f1e2702441ebb90ededd28ae91959d"&gt;
        &lt;i class="fas fa-play"&gt;&lt;/i&gt; Run on the Rust Playground
    &lt;/a&gt;
&lt;/div&gt;&lt;pre class="code rust"&gt;&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fizzy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fizzy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-16"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_b35e4a5b8c954955b1837b88a485b7d6-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;It may look like all we did was shuffle around where the code was (and for this simple of a program traits are already overkill) but structuring our logic into a trait allows for flexibility down the road, especially if we have to add more methods to &lt;code&gt;Fizzy&lt;/code&gt; or define it for different types (imagine a new Fizzbuzz with letters instead of numbers). The separation also allows us to write unit tests to validate &lt;code&gt;fizzy&lt;/code&gt; since it can be called separately from the main function.&lt;/p&gt;
&lt;div class="section" id="idiomatic-testing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#id13"&gt;Idiomatic Testing???&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unit tests themselves are not unique/idiomatic to Rust. In fact, you'd be hard pressed to find a modern language that does not have an extensive unit test framework to tap into. What &lt;em&gt;is&lt;/em&gt; idiomatic, however, is how testing is built into the core language and Rust's solution to testing private interfaces.&lt;/p&gt;
&lt;p&gt;When writing a class/interface, I'll split complex methods into multiple small methods that can be easily tested, but I don't want those interim methods exposed to the end user. Python makes this easy enough with private methods, prefixing a function with an underscore (_) marks it as private, and most documentation and linters will treat it as such. However, it's actually as public as any other function, so while the IDE might flag a warning when I call the method to test it, there's nothing illegal about doing so (see below).&lt;/p&gt;
&lt;pre class="code Python"&gt;&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-4"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# putting an _ before a method marks it as private&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preamble&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-8"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;preamble&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-11"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# a public interface can call a private method&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;greeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Greeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Fotonix"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;greeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# this instance method is public&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;greeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Buongiorno"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# this method is private, but can still be called&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#-- Output --&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Hello Fotonix&lt;/span&gt;
&lt;a name="rest_code_28249626e21343dc8f7d0c47a7765f73-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Buongiorno Fotonix&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;On the opposite side of the accessability spectrum we have C++, which uses its &lt;a class="reference external" href="https://stackoverflow.com/questions/860339/difference-between-private-public-and-protected-inheritance"&gt;public, private, and protected&lt;/a&gt; keywords to strictly enforce what objects and classes have access to those methods. While this is great from a security standpoint, it makes testing non-public interfaces difficult because you either have to (1) accept that you can only write "blackbox tests" that test the interfaces end users have, or (2) create &lt;a class="reference external" href="https://www.geeksforgeeks.org/friend-class-function-cpp/"&gt;friend classes&lt;/a&gt; that wrap the private functions in a public interface, and test that new interface.&lt;/p&gt;
&lt;p&gt;Rust strikes a happy medium between the two. You can still declare traits as public or private, and that privacy is not only respected, but enforced at compile-time. However, using the &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html"&gt;modules&lt;/a&gt; system, you can put your tests in a path that has access to the private traits (i.e. they're within the trait's scope).&lt;/p&gt;
&lt;p&gt;The most common way to do this is to &lt;em&gt;inline unit tests in the same file as the methods you're testing&lt;/em&gt; and wrapping them in a module called &lt;code&gt;test&lt;/code&gt;. Apart from this unique layout, writing the tests themselves is similar to most unit-test frameworks. Rust has built-in macros for assertions and tests can be separated into functions to run concurrently. We'll add unit-tests to the bottom of our Fizzbuzz program to validate the &lt;code&gt;Fizzy&lt;/code&gt; trait. Tests can by run by running &lt;code&gt;cargo test&lt;/code&gt; from the terminal, or "test" from the pull-down menu in the playground.&lt;/p&gt;
&lt;div class="rust-playground"&gt;
    &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=0903c09a16ab46e0fbc66beb3129280e"&gt;
        &lt;i class="fas fa-play"&gt;&lt;/i&gt; Run on the Rust Playground
    &lt;/a&gt;
&lt;/div&gt;&lt;pre class="code rust"&gt;&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;super&lt;/span&gt;::&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[test]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;test_fizz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="fm"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[test]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;test_buzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="fm"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[test]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;test_fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="fm"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[test]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-27"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;test_num&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-28"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-29"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="fm"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-30"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-31"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_5d3844a759524c8fb0044f21ece5c27e-32"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="generic-traits-and-monomorphization"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#id14"&gt;Generic Traits and Monomorphization&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point pulling out the above Fizzbuzz will knock any interviewer's socks clean off... or they'll be annoyed that you've spend so much time on such an easy question, could go either way. But we're not here to please an imaginary interviewer! We're writing the most idiomatic Fizzbuzz in the history of Rust, so let's add one more "&lt;em&gt;totally unnecessary in this context but useful in general&lt;/em&gt;" feature: Generic Types.&lt;/p&gt;
&lt;p&gt;Up until now we've used &lt;code&gt;i32&lt;/code&gt; as the base type for all things Fizzbuzz. It's a safe bet for general integers, having a range of &amp;gt;4 billion, but will it always be the &lt;em&gt;right&lt;/em&gt; choice for our program? If Fizzbuzz will only ever use positive numbers, you may as well use an unsigned int. If you only ever need to calculate up to 100, 32-bits is overkill and you're better off with &lt;code&gt;u8&lt;/code&gt;. Instead of trying to predict the end use-case, we want to write our trait implementation such that the main function can call it with &lt;em&gt;any&lt;/em&gt; integer type, and an appropriate trait method is called.&lt;/p&gt;
&lt;p&gt;Rust solves this issue with &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch10-01-syntax.html"&gt;generics&lt;/a&gt;. Instead of defining a function for a specific type, the programmer defines a set of traits that the type &lt;strong&gt;must&lt;/strong&gt; implement. Generics are one of Rust's &lt;em&gt;zero-cost abstractions&lt;/em&gt;, and provide flexibility while incurring &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch10-01-syntax.html#performance-of-code-using-generics"&gt;no overhead at runtime&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make &lt;code&gt;Fizzy&lt;/code&gt; generic to all int types, we'll use the &lt;a class="reference external" href="https://crates.io/crates/num"&gt;num&lt;/a&gt; crate. The trait we want is &lt;code&gt;PrimInt&lt;/code&gt; which is a general abstraction for integer types, and &lt;code&gt;Zero&lt;/code&gt; which will generate the zero value we compare to. We also need the &lt;code&gt;Display&lt;/code&gt; trait from the standard library, which enforces that the type can be formatted into a string.&lt;/p&gt;
&lt;div class="rust-playground"&gt;
    &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=8305e2bdd08c0da94542fc3a8d670a7c"&gt;
        &lt;i class="fas fa-play"&gt;&lt;/i&gt; Run on the Rust Playground
    &lt;/a&gt;
&lt;/div&gt;&lt;pre class="code rust"&gt;&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_traits&lt;/span&gt;::&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;identities&lt;/span&gt;::&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PrimInt&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 0.2.14&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fizzy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fizzy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nc"&gt;PrimInt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nc"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;fmt&lt;/span&gt;::&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;::&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// These will never fail&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;five&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;five&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-25"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-27"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-28"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c4ffac00fbf64c10bcfb7597941245b2-29"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Notice how we can no longer use integers in &lt;code&gt;fizzy&lt;/code&gt;, but instead have to convert them to our generic type within the function. Fortunately the compiler optimizes this out and replaces them with constants in the final code. This is also a case where its acceptable to use &lt;code&gt;unwrap&lt;/code&gt; without fear of causing a panic at runtime. Since T implements &lt;code&gt;PrimInt&lt;/code&gt; we know a conversion from integers to T will never fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="going-off-the-deep-end"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#id15"&gt;Going off the Deep End&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We did it, we wrote an amazing Fizzbuzz leveraging a slew of Rust's unique features! But we also cheated slightly... The rules of the game asked us to print the result of the fizzbuzz check, but to enable testing we return a &lt;code&gt;String&lt;/code&gt; that's printed in the main loop. We can trim down this waste of a &lt;em&gt;whopping 72 bytes&lt;/em&gt; of memory by having &lt;code&gt;fizzy&lt;/code&gt; write directly to an IO stream! The easiest solution would be to have our function call the &lt;code&gt;println!&lt;/code&gt; macro directly, but then we can no longer test our function. Instead, We'll borrow a tip from the &lt;a class="reference external" href="https://rust-cli.github.io/book/tutorial/testing.html#making-your-code-testable"&gt;Rust CLI Book&lt;/a&gt; (different than &lt;em&gt;The Rust Book&lt;/em&gt;, but equally as good) where we pass a mutable reference to a &lt;code&gt;Writer&lt;/code&gt; handle. In the main loop that handle will point to stdout, but for testing it will be a &lt;code&gt;vector&lt;/code&gt; that we can compare to the expected output.&lt;/p&gt;
&lt;p&gt;This requires a couple modifications to our &lt;code&gt;fizzy&lt;/code&gt; function:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;We need to replace all the match statement arms with &lt;code&gt;writeln!&lt;/code&gt; macro calls.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since &lt;code&gt;writeln!&lt;/code&gt; can fail we need to modify the signature of &lt;code&gt;fizzy&lt;/code&gt; to return a &lt;code&gt;std::io::Result&lt;/code&gt; enum, allowing us to squeeze in yet another idiomatic feature: Error Types!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We also want to be able to catch the error in the main function. so we'll replace the for loop with an iterator, and consume it with a &lt;code&gt;try_for_each&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="rust-playground"&gt;
    &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=df1f2f10f63bc1eed011574e4ce5ba31"&gt;
        &lt;i class="fas fa-play"&gt;&lt;/i&gt; Run on the Rust Playground
    &lt;/a&gt;
&lt;/div&gt;&lt;pre class="code rust"&gt;&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_traits&lt;/span&gt;::&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;identities&lt;/span&gt;::&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PrimInt&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 0.2.14&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;io&lt;/span&gt;::&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fizzy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fizzy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nc"&gt;PrimInt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nc"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;fmt&lt;/span&gt;::&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;::&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// These will never fail&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;five&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;five&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;writeln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;writeln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;writeln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;writeln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-26"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-27"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;io&lt;/span&gt;::&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-28"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;try_for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fizzy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-29"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"IO Error Writing to Stream: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-30"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_da249fbe4c584950aadd65a1ceae235f-31"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;With those small changes we've added mutable references, iterators, and error handling to the list of features this little program can demonstrate. Was any of it necessary? Not at all! Our final output is no different than the first program composed of if-else statements. But it's always fun to start with a trivial program and think up ways to transform it into something that makes me feel like I'll one day earn the title of "Rustacean".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-why-no-love-for-enum"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/rust-fizzbuzz/#id16"&gt;Update - Why no Love for Enum?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After posting this code onto the &lt;a class="reference external" href="https://www.reddit.com/r/rust/"&gt;r/rust&lt;/a&gt; subreddit, the most common feedback I got was along the lines of "why are you passing strings around/writing directly to stdout, make an enum and use that instead." This somewhat surprised me because &lt;a class="reference external" href="https://github.com/rfrazier716/rust_101/blob/d0028ed3072b4d7ce34b845fe6044266cdcaa123/fizzbuzz/src/main.rs"&gt;my first pass&lt;/a&gt; at writing this code &lt;em&gt;did&lt;/em&gt; use an enum with an associated value, and the feedback for that code was "the enum is unnecessary if all you'll ever do is print the output, just print it directly to stdout." These conflicting feedbacks have helped me spawn my own definition for truly idiomatic Rust:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"The most idiomatic Rust is whatever code you did not write, but somebody else has decided you should."&lt;/p&gt;
&lt;p class="attribution"&gt;âFotonix&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not one to disappoint, however, lets write a final Fizzbuzz that forgoes our custom trait in favor of an enum that implements &lt;code&gt;std::fmt::Display&lt;/code&gt;!&lt;/p&gt;
&lt;div class="rust-playground"&gt;
    &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=8d9fc8300bf73040735c770a9e3ecf1d"&gt;
        &lt;i class="fas fa-play"&gt;&lt;/i&gt; Run on the Rust Playground
    &lt;/a&gt;
&lt;/div&gt;&lt;pre class="code rust"&gt;&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_traits&lt;/span&gt;::&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;identities&lt;/span&gt;::&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PrimInt&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 0.2.14&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[derive(Debug, PartialEq)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;FizzbuzzResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Fizz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Buzz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;::&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FizzbuzzResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nc"&gt;fmt&lt;/span&gt;::&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;::&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;'&lt;/span&gt;&lt;span class="nb"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;fmt&lt;/span&gt;::&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;FizzbuzzResult&lt;/span&gt;::&lt;span class="n"&gt;Fizz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;write!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;FizzbuzzResult&lt;/span&gt;::&lt;span class="n"&gt;Buzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;write!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;FizzbuzzResult&lt;/span&gt;::&lt;span class="n"&gt;FizzBuzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;write!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;FizzbuzzResult&lt;/span&gt;::&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;write!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-26"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzbuzz&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;: &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;FizzbuzzResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-27"&gt;&lt;/a&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-28"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nc"&gt;PrimInt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-29"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nb"&gt;Copy&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Clone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-30"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-31"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;::&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-32"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// These will never fail&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-33"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not convert '3' to generic type"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-34"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;five&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;::&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not convert '5' to generic type"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-35"&gt;&lt;/a&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-36"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;five&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-37"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FizzbuzzResult&lt;/span&gt;::&lt;span class="n"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-38"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FizzbuzzResult&lt;/span&gt;::&lt;span class="n"&gt;Fizz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-39"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FizzbuzzResult&lt;/span&gt;::&lt;span class="n"&gt;Buzz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-40"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FizzbuzzResult&lt;/span&gt;::&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-41"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-42"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-43"&gt;&lt;/a&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-44"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-45"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-46"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-47"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_e05b53e70fa94a2099a767f4c8b30e61-48"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This code has a few distinct advantages, but the main ones are you only ever return an enum that lives on the stack, and testing no longer involves string comparison, but instead compares the returned enum to the expected type (This is why &lt;code&gt;PartialEq&lt;/code&gt; is derived for &lt;code&gt;FizzbuzzResult&lt;/code&gt;). On the flip side, we now have two match comparisons: one to generate the enum and one to display it, whereas our first attempt has only one.&lt;/p&gt;
&lt;p&gt;At this point I don't know which of these options is &lt;em&gt;more&lt;/em&gt; idiomatic, but I do know now that I've written them down, somebody is going to come in with a third option claiming it's superior to both ð.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>rust</category><guid>https://www.fotonixx.com/posts/rust-fizzbuzz/</guid><pubDate>Fri, 09 Jul 2021 00:27:33 GMT</pubDate></item><item><title>Version Controlling Your Data Science Projects</title><link>https://www.fotonixx.com/posts/data-science-vcs/</link><dc:creator>Ryan Frazier</dc:creator><description>&lt;figure&gt;&lt;img src="https://www.fotonixx.com/images/data_science_vcs/preview_image.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;Historically I've been a huge advocate of &lt;a class="reference external" href="https://www.wolfram.com/mathematica/"&gt;Mathematica&lt;/a&gt; for scientific computing. The symbolic analysis made physics modeling a breeze, and I could quickly create attractive summary plots to be shared with my team. As I started looking at large datasets and collaborating with more engineers, however, Mathematica became more hinderance than help. As Code could not be easily version controlled, it would often end up emailed back and forth with the receiver having to manually check that they had all dependent files, as well as update file-paths to load data without errors.&lt;/p&gt;
&lt;p&gt;Most of my coworkers were not familiar with Mathematica, and there wasn't justification in purchasing license seats just for them to open and run my files. All of this culminated in an environment where most data analysis bottlenecked through me and caused unnecessary slowdowns.&lt;/p&gt;
&lt;p&gt;These issues sparked my conversion to &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; for almost all analysis. As free, open-source software, anybody on my team can install it in minutes, and its popularity as a scripting language means nearly everybody we onboard has some Python experience. Today I'll be covering the repository structure I've adopted to make a data analysis workflow that anybody can easily use and contribute to. It assumes you have familiarity with the Python ecosystem and &lt;a class="reference external" href="https://jupyter.org/"&gt;Jupyter&lt;/a&gt; Notebook environment, as well as a light understanding of Git.&lt;/p&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#what-makes-this-structure-special" id="id2"&gt;What Makes this Structure Special?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#required-software" id="id3"&gt;Required Software&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#setting-up-our-python-environment" id="id4"&gt;Setting Up Our Python Environment&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#easy-virtual-environments-with-poetry" id="id5"&gt;Easy Virtual Environments with Poetry&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#adding-common-dependencies" id="id6"&gt;Adding Common Dependencies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#registering-our-environment-as-an-ipython-kernel" id="id7"&gt;Registering Our Environment as an IPython Kernel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#adding-version-control" id="id8"&gt;Adding Version Control&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#making-a-new-repository" id="id9"&gt;Making a New Repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#choosing-which-files-to-ignore" id="id10"&gt;Choosing which Files to Ignore&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#creating-a-git-hook-to-prevent-messy-commits" id="id11"&gt;Creating a Git Hook to Prevent Messy Commits&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#version-controlling-data" id="id12"&gt;Version Controlling Data&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#why-don-t-we-store-everything-in-the-git-repository" id="id13"&gt;Why Don't We Store Everything in the Git Repository?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#setting-up-dvc" id="id14"&gt;Setting up DVC&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#adding-a-remote" id="id15"&gt;Adding a Remote&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#document-everything-with-a-readme" id="id16"&gt;Document Everything with a ReadMe&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#what-s-the-workflow-look-like" id="id17"&gt;What's the Workflow Look Like?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#how-to-save-results" id="id18"&gt;How to Save Results&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="contents alert alert-primary ml-0 topic" id="quick-links"&gt;
&lt;p class="topic-title"&gt;Quick Links&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#what-makes-this-structure-special" id="id19"&gt;What Makes this Structure Special?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#required-software" id="id20"&gt;Required Software&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#setting-up-our-python-environment" id="id21"&gt;Setting Up Our Python Environment&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#adding-version-control" id="id22"&gt;Adding Version Control&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#version-controlling-data" id="id23"&gt;Version Controlling Data&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#document-everything-with-a-readme" id="id24"&gt;Document Everything with a ReadMe&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#what-s-the-workflow-look-like" id="id25"&gt;What's the Workflow Look Like?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.fotonixx.com/posts/data-science-vcs/#how-to-save-results" id="id26"&gt;How to Save Results&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-makes-this-structure-special"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id19"&gt;What Makes this Structure Special?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our new analysis flow is going to borrow extensively from the great open source tools that have come about for data science combined with best practices for software maintenance. In the end we will have a repository that can be extended for any data analysis project featuring:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;A version controlled &lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; repository with hooks in place to only store code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://jupyter.org/"&gt;Jupyter&lt;/a&gt; notebook integration to perform the actual analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A managed Python environment to keep track of dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://dvc.org/"&gt;Version controlled data&lt;/a&gt; which is stored separately from your code, but tracked in the main repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A clean, informative ReadMe enabling other users to download and run the same analysis.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="class alert alert-info docutils container"&gt;
&lt;i class="fas fa-info-circle"&gt;&lt;/i&gt; If you want to skip the explanation, you can fork a &lt;a href="https://github.com/rfrazier716/data_analysis_template"&gt;template of the final repository&lt;/a&gt; from GitHub.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="required-software"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id20"&gt;Required Software&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While most of the tools we use will be installed through &lt;a class="reference external" href="https://pip.pypa.io/en/stable/"&gt;Python's own package manager&lt;/a&gt;, there's a few pieces that need to be downloaded separately:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;A &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; Distribution - The base Python Interpreter. At the time of writing I recommend &lt;a class="reference external" href="https://www.python.org/downloads/release/python-3810/"&gt;version 3.8&lt;/a&gt;, which is well supported. It's worth noting that if you are on Windows, the &lt;code&gt;pywinpty&lt;/code&gt; package (required by Jupyter) only supports 64-bit Python, so make sure to download a 64-bit interpreter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt; - We'll use Poetry to manage virtual environments as well as make sure others can install the same package versions we're using (via the &lt;code&gt;poetry.lock&lt;/code&gt; file).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; - While any text editor will work, VSCode's extensive Python support (including a Jupyter extension that runs a server in the editor) makes it a one-stop shop for data analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://git-scm.com/"&gt;Git&lt;/a&gt; - At the end of the day Jupyter notebooks are still code, and we want to exercise best software practices when writing them, version control included. Git can be daunting at first, but &lt;a class="reference external" href="https://code.visualstudio.com/docs/editor/versioncontrol"&gt;VSCode's Git integration&lt;/a&gt; means your commits can be done through the UI instead of command line.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once everything is installed we're ready to set up the environment. Create a new folder that will hold the repository and open it in VSCode (&lt;code&gt;Ctrl+K&lt;/code&gt; if you're already in VSCode).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-our-python-environment"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id21"&gt;Setting Up Our Python Environment&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We want the packages we depend on to be isolated from the rest of the Python installation. Since Python dynamically links libraries at runtime, updating a package down the line (e.g. to install a different library with a newer dependency) might break your old code, or worse, introduce a subtle bug that you don't catch until much later. While we could go to an extreme and containerize all of our code, running it in a Docker Environment or similar, Python instead offers a simpler solution through &lt;a class="reference external" href="https://docs.python.org/3/tutorial/venv.html"&gt;virtual environments&lt;/a&gt;. If virtual environments are a new concept, I recommend reading the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/venv.html"&gt;tutorial on python.org&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="easy-virtual-environments-with-poetry"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id5"&gt;Easy Virtual Environments with Poetry&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Poetry makes creating new environments easy with its &lt;code&gt;poetry init&lt;/code&gt; command. This will ask a series of questions about your project which the tool will use to generate a &lt;a class="reference external" href="https://snarky.ca/what-the-heck-is-pyproject-toml/"&gt;pyproject.toml&lt;/a&gt; file. You can also choose to add any package dependencies when creating the environment. It's simple and often faster to add dependencies later, so I typically skip this step.&lt;/p&gt;
&lt;p&gt;If there's not a console at the bottom of your VSCode window, open it with &lt;code&gt;Ctrl+Shift+`&lt;/code&gt;, or Terminal -&amp;gt; New Terminal and run the initialization.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;poetry init
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;This command will guide you through creating your pyproject.toml config.&lt;/span&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;Package name [data_analysis]:  my_awesome_analysis_repository&lt;/span&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;Version [0.1.0]:&lt;/span&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-7"&gt;&lt;/a&gt;&lt;span class="go"&gt;Description []:&lt;/span&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;Author [Ryan Frazier &amp;lt;ryan@fotonixx.com&amp;gt;, n to skip]:&lt;/span&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-9"&gt;&lt;/a&gt;&lt;span class="go"&gt;License []:&lt;/span&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;Compatible Python versions [^3.9]:  &amp;gt;3.8,&amp;lt;3.9&lt;/span&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-12"&gt;&lt;/a&gt;&lt;span class="go"&gt;Would you like to define your main dependencies interactively? (yes/no) [yes] no&lt;/span&gt;
&lt;a name="rest_code_7d385ec27396493486f6f8ce654d1227-13"&gt;&lt;/a&gt;&lt;span class="go"&gt;Would you like to define your development dependencies interactively? (yes/no) [yes] no&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Once it's done, &lt;code&gt;pyproject.toml&lt;/code&gt; will be generated in the root directory with the information you entered. By default Poetry will create the environment in a separate directory, but you can access it with &lt;code&gt;poetry run&lt;/code&gt;. Test that your environment is running by executing &lt;code&gt;poetry run py --version&lt;/code&gt;, and making sure it matches the version you specified.&lt;/p&gt;
&lt;div class="section" id="adding-common-dependencies"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id6"&gt;Adding Common Dependencies&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The specific packages you need will vary project-to-project, you'll almost always be using the &lt;a class="reference external" href="https://www.scipy.org/stackspec.html"&gt;Scientific Python Stack&lt;/a&gt;, so let's add it to our dependencies! We also need to install the &lt;a class="reference external" href="https://ipython.org/ipython-doc/3/interactive/tutorial.html"&gt;Interactive Python (IPython)&lt;/a&gt; Kernel so we can register this environment as a Jupyter Kernel later. All of these can be installed using poetry's &lt;code&gt;add&lt;/code&gt; command.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_0ad5621c573341bc90ec73f5254c7f57-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;poetry add jupyterlab numpy scipy matplotlib pandas ipykernel
&lt;/pre&gt;&lt;p&gt;If you open &lt;code&gt;pyproject.toml&lt;/code&gt; you'll see all those packages are now listed in the dependencies section. Additionally, Poetry created a &lt;code&gt;poetry.lock&lt;/code&gt; file which is used to store the exact versions of every package and dependency in the environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="registering-our-environment-as-an-ipython-kernel"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id7"&gt;Registering Our Environment as an IPython Kernel&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Jupyter uses &lt;a class="reference external" href="https://ipython.readthedocs.io/en/stable/development/how_ipython_works.html?highlight=kernel#the-ipython-kernel"&gt;IPython Kernels&lt;/a&gt; running as a separate process to evaluate cells. In order for Jupyter to use our newly created virtual environment, we need to register it with a kernel using the ipykernel package. Run the below command, replacing &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;display-name&lt;/code&gt; with appropriate values for the project.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_42f9028dac5a4f75a9ca1d9a53f1d17e-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;poetry run python -m ipykernel install --user --name project_x_env --display-name &lt;span class="s2"&gt;"My Awesome Data Science Environment"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Now you can Launch Jupyter from &lt;strong&gt;any&lt;/strong&gt; environment, including the global environment, and still access this environment's packages. If you don't have Jupyter installed globally, you can run the installation in our environment by executing &lt;code&gt;poetry run jupyter lab&lt;/code&gt;. Alternatively, creating and opening an &lt;code&gt;*.ipynb&lt;/code&gt; file in VSCode will enable the data science view.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="/images/data_science_vcs/kernel_addition.png" src="https://www.fotonixx.com/images/data_science_vcs/kernel_addition.png"&gt;
&lt;p class="caption"&gt;Our newly created Kernel as a selectable option&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-version-control"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id22"&gt;Adding Version Control&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might be wondering why a data analysis project needs version control, or what version control even is. &lt;a class="reference external" href="https://www.atlassian.com/git/tutorials/what-is-version-control"&gt;To quote Atlassian&lt;/a&gt;:&lt;/p&gt;
&lt;div class="class alert alert-info docutils container"&gt;
&lt;p&gt;&lt;em&gt;"Version control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members."&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Sounds pretty great, right?! If you still need convincing: imagine you're toying with a new way to look at data but you don't want to delete your current method. Instead of copying the file into a new one, you can create a &lt;a class="reference external" href="https://www.atlassian.com/git/tutorials/using-branches"&gt;branch&lt;/a&gt; and &lt;a class="reference external" href="https://www.atlassian.com/git/tutorials/using-branches/git-merge"&gt;merge&lt;/a&gt; the changes if they work, or delete them if not. Not only that but you can have multiple people simultaneously looking at the data, each person focused on their specific tasks, with all changes merged at the end.&lt;/p&gt;
&lt;div class="section" id="making-a-new-repository"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id9"&gt;Making a New Repository&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To keep things simple we'll use VSCode's Git plugins to create, commit to, and push our repository. On the left side of the VSCode window you should see the directory structure with the pyproject and poetry.lock files. Depending on your Poetry settings the virtual environment may also be in this base directory.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="/images/data_science_vcs/empty_repository.png" src="https://www.fotonixx.com/images/data_science_vcs/empty_repository.png"&gt;
&lt;/div&gt;
&lt;p&gt;Open the Command Pallette (&lt;code&gt;Ctrl+Shift+P&lt;/code&gt; or f1 on Windows) and type "git init". There should be only one option that reads "Git: Initialize Repository". Press Enter and select the current folder to initialize the repository.&lt;/p&gt;
&lt;p&gt;Notice that &lt;code&gt;pyproject.toml&lt;/code&gt; and &lt;code&gt;poetry.lock&lt;/code&gt; have turned green in the Explorer (&lt;code&gt;Ctrl+Shift+E&lt;/code&gt;)! This is because VSCode knows you have a repository in the directory and that those files have not been staged for a commit. If you open the Source Control Panel (&lt;code&gt;Ctrl+Shift+G&lt;/code&gt;) you'll see both those files listed as changes with a "U" on the right meaning they're unstaged. Before staging and making our initial commit, however, we want to add a few more files that will help flesh out the repository. These include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;a &lt;code&gt;readme.md&lt;/code&gt; file in the base directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a &lt;code&gt;.gitignore&lt;/code&gt; file in the base directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a new directory &lt;code&gt;/notebooks/&lt;/code&gt; with a &lt;code&gt;readme.md&lt;/code&gt; inside of it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a &lt;code&gt;/data/&lt;/code&gt; directory with an empty &lt;code&gt;.gitkeep&lt;/code&gt; file  inside of it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you've added the files your project directory should look similar to below:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="/images/data_science_vcs/adding_readme_and_ignore.png" src="https://www.fotonixx.com/images/data_science_vcs/adding_readme_and_ignore.png"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="choosing-which-files-to-ignore"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id10"&gt;Choosing which Files to Ignore&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Git uses the &lt;code&gt;.gitignore&lt;/code&gt; file to black-list specific files or even entire directories from being captured into version control. This helps keep the repository size small and only commit files that are necessary to reproduce the environment. As a rule of thumb the following should be excluded from your commits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Any IDE settings (the &lt;code&gt;./.vscode/&lt;/code&gt; directory )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Auto-generated files (&lt;code&gt;*.pyc&lt;/code&gt;, file backups etc.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User specific environment files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Large files that don't often change (downloaded datasets, third-party libraries)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It might seem alarming that datasets should not be part of version control, after all you have nothing to analyze without data! Further down we'll talk about how to synchronize data with the repository, but for now we'll ignore all files in the /data/ directory except for our whitelisted &lt;code&gt;.gitkeep&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_608b22497c754d73b2b15e05505f1f96-1"&gt;&lt;/a&gt;# Ignore data directories
&lt;a name="rest_code_608b22497c754d73b2b15e05505f1f96-2"&gt;&lt;/a&gt;/data/*
&lt;a name="rest_code_608b22497c754d73b2b15e05505f1f96-3"&gt;&lt;/a&gt;!/data/.gitkeep
&lt;/pre&gt;&lt;p&gt;The rest of our &lt;code&gt;.gitignore&lt;/code&gt; file is built off of GitHub's &lt;a class="reference external" href="https://github.com/github/gitignore/blob/master/Python.gitignore"&gt;python.gitignore&lt;/a&gt; with the above additions to ignore our data directory, as well as VSCode settings, and Jupyter backup files. The entire file can be found &lt;a class="reference external" href="https://github.com/rfrazier716/data_analysis_template/blob/main/.gitignore"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-a-git-hook-to-prevent-messy-commits"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id11"&gt;Creating a Git Hook to Prevent Messy Commits&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I love Jupyter for exploration and data analysis, one thing that always bothers me is how the code lives in the same file as evaluated evaluated output. When version controlling notebooks this can cause issues for a couple of reasons:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;If the data you're working on is private but the code is public, the private data could end up in an output and committed, available for anybody to see.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Git works by logging differences in your file. This includes things like cell number, cell output, and picture metadata, if you version control an evaluated notebook you'll have unstaged changes as soon as you evaluate a cell, even though none of the written code actually changed!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We want a way to scrub our notebooks of all evaluated output before committing them. To do so we'll use &lt;a class="reference external" href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;githooks&lt;/a&gt; which are custom scripts that run when you perform a Git command. Flipping through the Githook documentation, the pre-commit hook is exactly what we need. Unfortunately, installing a Githook is a manual process that requires you to add a file to your &lt;code&gt;/.git/&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="class alert alert-warning docutils container"&gt;
&lt;i class="fas fa-exclamation-triangle"&gt;&lt;/i&gt; Githooks are a great way to keep your repository clean, but you &lt;b&gt;must&lt;/b&gt; make sure your file is saved before running the hook, otherwise the script will overwrite any unsaved changes.&lt;/div&gt;
&lt;p&gt;In order to make it as easy as possible for anybody to use this template, as well as make writing the githook simple, we'll instead use the &lt;a class="reference external" href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; python package and write our hook with a YAML file that will live in the root of our version control. The pre-commit config we'll be using comes from &lt;a class="reference external" href="https://zhauniarovich.com/post/2020/2020-06-clearing-jupyter-output/"&gt;Yuri Zhauniarovich's blog&lt;/a&gt; and uses &lt;a class="reference external" href="https://nbconvert.readthedocs.io/en/latest/"&gt;nbconvert&lt;/a&gt; to scrub the output in-place.&lt;/p&gt;
&lt;p&gt;Let's add &lt;code&gt;pre-commit&lt;/code&gt; and &lt;code&gt;nbconvert&lt;/code&gt; to our poetry environment. Since it's not needed to actually run the notebooks, and will only be used by people contributing to the codebase we'll install them as developer packages.&lt;/p&gt;
&lt;pre class="code shell-session"&gt;&lt;a name="rest_code_a7fc6375d7a74eb789532d89091abcee-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;poetry add pre-commit nbconvert --dev
&lt;/pre&gt;&lt;p&gt;To define the hook, a new file in the base directory called &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; and add the following text:&lt;/p&gt;
&lt;pre class="code YAML"&gt;&lt;a name="rest_code_c6d8d899f55945359a9b97b86ef14b3a-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c6d8d899f55945359a9b97b86ef14b3a-2"&gt;&lt;/a&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;local&lt;/span&gt;
&lt;a name="rest_code_c6d8d899f55945359a9b97b86ef14b3a-3"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c6d8d899f55945359a9b97b86ef14b3a-4"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jupyter-nb-clear-output&lt;/span&gt;
&lt;a name="rest_code_c6d8d899f55945359a9b97b86ef14b3a-5"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jupyter-nb-clear-output&lt;/span&gt;
&lt;a name="rest_code_c6d8d899f55945359a9b97b86ef14b3a-6"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;\.ipynb$&lt;/span&gt;
&lt;a name="rest_code_c6d8d899f55945359a9b97b86ef14b3a-7"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;commit&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_c6d8d899f55945359a9b97b86ef14b3a-8"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;system&lt;/span&gt;
&lt;a name="rest_code_c6d8d899f55945359a9b97b86ef14b3a-9"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;poetry run jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The last piece is to install the githook so that it's run before every commit. Pre-commit makes this easy for us with it's &lt;code&gt;install&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class="code shell-session"&gt;&lt;a name="rest_code_e7f0d69da5584d4ca20394d42fa2861e-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;poetry run pre-commit install
&lt;a name="rest_code_e7f0d69da5584d4ca20394d42fa2861e-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;pre-commit installed at .git\hooks\pre-commit&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This is a good spot for our first commit! We've fleshed out the repository, filled our &lt;code&gt;.gitignore&lt;/code&gt; and added most of our template files (even if they are empty). To commit using VSCode we'll again use the Source Control Panel (&lt;code&gt;Ctrl+Shift+G&lt;/code&gt;). You can manually stage files by pressing the "+" icon to the right of the files, or you can stage all changes by clicking the "+" to the right of the "Changes" drop-down.&lt;/p&gt;
&lt;p&gt;All commits should have a meaningful message so that you can look back and quickly understand what was changed. &lt;a class="reference external" href="https://chris.beams.io"&gt;Chris Beam's Blog&lt;/a&gt; has a great &lt;a class="reference external" href="https://chris.beams.io/posts/git-commit/"&gt;post&lt;/a&gt; on the importance of a good commit message and how to write one, but for our first commit message we'll keep it simple with "initial commit".&lt;/p&gt;
&lt;p&gt;With the files staged and commit message filled out, press the check-mark at the top of the panel to commit the changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="version-controlling-data"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id23"&gt;Version Controlling Data&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next comes adding data to the repository. Copy any necessary data files over to the &lt;code&gt;/data/&lt;/code&gt; directory we made earlier. You can have a nested directory tree inside of that directory so organize it into a structure that works for you. Looking at the Explorer panel you'll notice all these files are greyed out and don't show up if you tab over to the Source Control panel. Since &lt;code&gt;/data/&lt;/code&gt; is ignored every file and folder below is is subsequently ignored as well.&lt;/p&gt;
&lt;div class="section" id="why-don-t-we-store-everything-in-the-git-repository"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id13"&gt;Why Don't We Store Everything in the Git Repository?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To understand why we wouldn't want to store our large data files in a Git repository, lets peel back what happens when you clone an existing repository onto your local system. From Atlassian's &lt;a class="reference external" href="https://www.atlassian.com/git/tutorials/git-lfs"&gt;Git-LFS tutorial&lt;/a&gt;:&lt;/p&gt;
&lt;div class="class alert alert-info docutils container"&gt;
&lt;p&gt;&lt;em&gt;"Git is a distributed version control system, meaning the entire history of the repository is transferred to the client during the cloning process. For projects containing large files, particularly large files that are modified regularly, this initial clone can take a huge amount of time, as every version of every file has to be downloaded by the client."&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The solution to this problem is to not version control the large files at all, but instead version control small reference files that tell you &lt;em&gt;where&lt;/em&gt; the data lives so you only check-out the version you want, instead of the entire history. &lt;a class="reference external" href="https://git-lfs.github.com/"&gt;Git-LFS&lt;/a&gt; (Large File System) is one implementation of this strategy, but we're going to instead use the &lt;a class="reference external" href="https://dvc.org/"&gt;Data Version Control (DVC)&lt;/a&gt; Python package, which is specifically designed with data-analysis in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-dvc"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id14"&gt;Setting up DVC&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since DVC is a Python package, we can install it with Pip just like our other dependencies. The assumption is anybody using our repository will want access to the data, not just developers, so we won't both with the &lt;code&gt;--dev&lt;/code&gt; flag either.&lt;/p&gt;
&lt;pre class="code shell-session"&gt;&lt;a name="rest_code_44e05b5acfdf406c986d5a5055d36774-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;poetry add dvc
&lt;/pre&gt;&lt;p&gt;DVC is designed to mimic a Git workflow, so many of the commands you'd use for Git have DVC parallels. For example, to initialize DVC in our repository and add the data directory we use the &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; commands respectively.&lt;/p&gt;
&lt;pre class="code shell-session"&gt;&lt;a name="rest_code_ad9d1a5c13104e718cad4d769424cd3d-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;poetry run dvc init
&lt;a name="rest_code_ad9d1a5c13104e718cad4d769424cd3d-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;poetry run dvc add ./data/
&lt;a name="rest_code_ad9d1a5c13104e718cad4d769424cd3d-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;~~~&lt;/span&gt;
&lt;a name="rest_code_ad9d1a5c13104e718cad4d769424cd3d-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;To track the changes with git, run:&lt;/span&gt;
&lt;a name="rest_code_ad9d1a5c13104e718cad4d769424cd3d-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;        git add data.dvc .gitignore&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Notice the final output after adding the data directory, DVC is telling us that it's created a new file called &lt;code&gt;data.dvc&lt;/code&gt; that's tracking changes to our data directory. It's also updated &lt;code&gt;.gitignore&lt;/code&gt; automatically for us to ignore &lt;code&gt;/data/&lt;/code&gt; (Our previously committed .gitkeep will not be ignored since it's already tracked). DVC's offering a convenience in case we had forgotten to ignore the directory ourselves, but since we already had, let's revert our &lt;code&gt;.gitignore&lt;/code&gt; to its previous state. In the Source Control Panel, right-click &lt;code&gt;.gitignore&lt;/code&gt; and select "Discard Changes". This will reset the file to its state in the previous commit.&lt;/p&gt;
&lt;p&gt;If you add new data to the directory, you can update &lt;code&gt;data.dvc&lt;/code&gt; by running &lt;code&gt;dvc add ./data/&lt;/code&gt; again. Make sure to commit &lt;code&gt;data.dvc&lt;/code&gt; as soon as you add new data, otherwise committed notebooks might lose sync with the data changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-a-remote"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id15"&gt;Adding a Remote&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;DVC allows you to back-up version-controlled data to remote servers, perfect for enabling multiple users to access the same version of a dataset. From the &lt;a class="reference external" href="https://dvc.org/doc/command-reference/remote#remote"&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="class alert alert-info docutils container"&gt;
&lt;p&gt;&lt;em&gt;The same way as GitHub provides storage hosting for Git repositories, DVC remotes provide a location to store and share data and models. You can pull data assets created by colleagues from DVC remotes without spending time and resources to build or process them locally. Remote storage can also save space on your local environment â DVC can fetch into the cache directory only the data you need for a specific branch/commit.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Using DVC with remote storage is optional. DVC commands use the local cache (usually in dir .dvc/cache) as data storage by default. This enables the main DVC usage scenarios out of the box.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I recommend setting up a default remote even if you're the only one looking at the dataset. Mine are usually directories on an internal network drive, but DVC has &lt;a class="reference external" href="https://dvc.org/doc/command-reference/remote/add#supported-storage-types"&gt;support for multiple storage types&lt;/a&gt;, so use whichever structure works best for you. The remote can even be a separate directory on you computer.&lt;/p&gt;
&lt;p&gt;Once the remote is set-up, pushing to it is as simple as running &lt;code&gt;dvc push &amp;lt;remote&amp;gt;&lt;/code&gt;. To pull from your remote you similarly run &lt;code&gt;dvc pull &amp;lt;remote&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="document-everything-with-a-readme"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id24"&gt;Document Everything with a ReadMe&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A good ReadMe will elevate your repository from "that collection of code that only you know how to use" to "an easily understood project that anybody can contribute to." Think of the ReadMe like a lab report with instruction on how to reproduce the analysis, it should:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Clearly summarize the goal of the repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain how to duplicate the code on a user's machine. This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Installing required software (Python, Poetry, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating the Virtual Environment and installing necessary packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Registering the Environment with Jupyter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pulling data from the DVC remote.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain how to run the analysis, with a description of what each notebook does and what results it will generate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give clear instructions for how users can contribute to/extend the repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Installing the additional developer dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making sure the githook is set-up so only clean files are committed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm a big fan of &lt;a class="reference external" href="https://github.com/othneildrew/Best-README-Template"&gt;othneildrew's Best ReadMe Template&lt;/a&gt; and use it for most of my projects. A modified version can be found on the &lt;a class="reference external" href="https://github.com/rfrazier716/data_analysis_template"&gt;example repository&lt;/a&gt; which covers all of the above requirements.&lt;/p&gt;
&lt;p&gt;Remember we also had a second ReadMe in the &lt;code&gt;/notebooks/&lt;/code&gt; directory which we'll use to describe each notebook in greater detail. You can even include example plots and outputs that the notebooks should generate. GitHub will show a rendered ReadMe in every directory that has one, so you can even group all your notebooks into separate subdirectories, and have a specific ReadMe explaining the purpose of every group!&lt;/p&gt;
&lt;p&gt;With data added, committed, and ReadMe's filled in it's time for our next commit! Stage all the changed files and give it a meaningful message: e.g. highlight what data was added and where it came from. Be sure to follow the &lt;a class="reference external" href="https://www.midori-global.com/blog/2018/04/02/git-50-72-rule"&gt;50-72 rule&lt;/a&gt; so your messages stay meaningful and concise.&lt;/p&gt;
&lt;p&gt;This is a great time to push your commits up to your favorite server. If VCS is completely new to you, I'd recommend &lt;a class="reference external" href="https://docs.github.com/en/github/getting-started-with-github"&gt;GitHub&lt;/a&gt; for its sheer popularity and option to make both public and private repositories with a free account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-the-workflow-look-like"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id25"&gt;What's the Workflow Look Like?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the repository set up, it's time to outline how to use it for analysis. While at the end of the day you should do whatever is natural for your team. I recommend adopting a modification of the &lt;a class="reference external" href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"&gt;Gitflow&lt;/a&gt; workflow:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;No work is done in the main branch of the repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you have a new task, make a branch off of &lt;code&gt;main&lt;/code&gt; and do all of your work in that new branch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All notebooks should live in the &lt;code&gt;/notebook/&lt;/code&gt; directory. Use subdirectories to group similar notebooks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the task is finished, clean up the branch and update the ReadMe to describe any new files. Depending on how formal your team is, manually merge the branch back into &lt;code&gt;main&lt;/code&gt; or submit a pull-request.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This structure ensures that analysis tasks are done in isolated environments and only merged back when they're finalized, and you don't need to constantly worry about pulling from the main branch and resolving merge requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-save-results"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.fotonixx.com/posts/data-science-vcs/#id26"&gt;How to Save Results&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository structure does a great job making sure analysis is done in a clear, reproducible matter, but I haven't touched on how to actually save results. In fact, because of our commit-hook, even if your VCS server rendered Jupyter notebooks (and many do) there would be no output and only code! How do we actually save results in a format that can be looked back on? This will vary from person-to-person, but I like to create a &lt;code&gt;/results/&lt;/code&gt; directory and use &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; to create a static website with a new page for each result. Be sure to populate them with saved images and hard coded values so that the results persist even if you edit the code later on.&lt;/p&gt;
&lt;p&gt;Static site generation with Sphinx can easily be integrated into a CI/CD workflow and Github even offers free hosting of static pages. Look into &lt;a class="reference external" href="https://github.com/c-w/ghp-import"&gt;gh-pages&lt;/a&gt; for an easy way to deploy your pages into a GitHub hosted Static site.&lt;/p&gt;
&lt;p&gt;This entire template can be found on &lt;a class="reference external" href="https://github.com/rfrazier716/data_analysis_template"&gt;my GitHub&lt;/a&gt;, feel free to fork it for your own projects and submit requests for additional features!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>analysis</category><category>data science</category><category>git</category><category>jupyter</category><category>python</category><guid>https://www.fotonixx.com/posts/data-science-vcs/</guid><pubDate>Mon, 31 May 2021 15:46:46 GMT</pubDate></item><item><title>5 Video Game Soundtracks to Jam Out to While Coding</title><link>https://www.fotonixx.com/posts/5-video-game-soundtracks-to-jam-out-to-while-coding/</link><dc:creator>Ryan Frazier</dc:creator><description>&lt;figure&gt;&lt;img src="https://www.fotonixx.com/images/music_for_coding/preview_image.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;div class="embed-responsive embed-responsive-1by1 rounded mb-2" id="quick-links"&gt;
&lt;iframe src="https://open.spotify.com/embed/playlist/5nc0NhiliBT6TtGMZAT1ML" height="380" frameborder="0" allowtransparency="true" allow="encrypted-media"&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;Looking for a great programming playlist, try a video game soundtrack! The lack of lyrics stop them from being a distraction, but they're engaging enough to help you focus and drown out background noise. Below are five soundtracks I regularly listen to when I need to shut out the world and code.&lt;/p&gt;
&lt;div class="section" id="doom-2016-mick-gordon"&gt;
&lt;h2&gt;5. Doom (2016) - Mick Gordon&lt;/h2&gt;
&lt;p&gt;For when you find yourself up too late with bloodshot eyes and an energy drink in hand, blazing through code like a wannabe hacker channeling your inner &lt;a class="reference external" href="https://www.youtube.com/watch?v=r38fEGep2yU"&gt;Cereal&lt;/a&gt;. There's nothing better to keep you in the zone like the grandfather of shooters: &lt;a class="reference external" href="https://bethesda.net/en/game/doom"&gt;Doom&lt;/a&gt;!&lt;/p&gt;
&lt;div class="container-fluid"&gt;
    &lt;div class="col-xs-12 col-sm-12 col-md-10 offset-md-1 col-lg-10 offset-lg-1 padding-zero embed-responsive embed-responsive-16by9 mt-4 mb-4"&gt;
            &lt;iframe src="https://www.youtube.com/embed/5a9E3n_VZRQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Filed under &lt;em&gt;Progressive Metal&lt;/em&gt;, &lt;a class="reference external" href="https://twitter.com/mick_gordon?lang=en"&gt;Mick Gordon's&lt;/a&gt; TGA winning soundtrack is full of high energy tracks to get your blood pumping. While a few songs feature samples of the 1993 classic (I'm looking at you "At DOOM's Gate"), most tracks set themselves apart from the original game's already great songs. If you want to make an evening of debug feel like you're pulling off a Shadowrun heist, look no further than Doom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="celeste-lena-raine"&gt;
&lt;h2&gt;4. Celeste - Lena Raine&lt;/h2&gt;
&lt;p&gt;A game that needs no introduction, &lt;a class="reference external" href="http://www.celestegame.com/"&gt;Celeste&lt;/a&gt; is an incredibly popular platformer that still manages to regularly show up on "hidden indie gems" lists. When an entire subcomponent of the game is to collect floating casette tapes to unlock "B-Side" levels, you know music must play a big role, and &lt;a class="reference external" href="http://lena.fyi/"&gt;Lena Raine&lt;/a&gt; does not disappoint!&lt;/p&gt;
&lt;div class="container-fluid"&gt;
    &lt;div class="col-xs-12 col-sm-12 col-md-10 offset-md-1 col-lg-10 offset-lg-1 padding-zero embed-responsive embed-responsive-16by9 mt-4 mb-4"&gt;
            &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/1rwAvUvvQzQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I find myself regularly looping through the 100 minutes of tracks only to be left wanting more when it ends. The feel of the songs range from motivating and energetic, to downright haunting, but every one is a perfect accompaniment when focusing on a task.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="desktop-dungeons-danny-baronowsky-grant-kirkhope"&gt;
&lt;h2&gt;3. Desktop Dungeons - Danny Baronowsky &amp;amp; Grant Kirkhope&lt;/h2&gt;
&lt;p&gt;There's a solid chance you haven't heard of &lt;cite&gt;Desktop Dungeons&lt;/cite&gt;, a smaller indie game from 2013. However, you've probably heard of Ubisoft's X-Com/Mushroom Kingdom Crossover &lt;a class="reference external" href="https://rabbids.ubisoft.com/portal/en-us/games/mario-rabbids-kingdom-battle.aspx"&gt;Mario + Rabbids, Kingdom Battle&lt;/a&gt; (music by Kirkhope) or the indie hit turned Legend of Zelda spinoff &lt;a class="reference external" href="https://braceyourselfgames.com/crypt-of-the-necrodancer/"&gt;Crypt of the Necrodancer&lt;/a&gt; (music by Baronowsky). With two great composers behind it, it's no wonder the Desktop Dungeons soundtrack turned out as good as it did.&lt;/p&gt;
&lt;div class="container-fluid"&gt;
    &lt;div class="col-xs-12 col-sm-12 col-md-10 offset-md-1 col-lg-10 offset-lg-1 padding-zero embed-responsive embed-responsive-16by9 mt-4 mb-4"&gt;
            &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/CS0WqQNIy5c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Mostly orchestral with some great brass sections, these tracks are great to put on when you need a bit of energy but don't want something so intense that it distracts your focus. The game itself is well worth attention too. Branded as a "coffee break" turn-based dungeon crawler, the games 15 minute rounds are incredibly satisfying, and the alpha is available for free on the &lt;a class="reference external" href="http://www.desktopdungeons.net/media/"&gt;developer's website&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="payday-2-simon-viklund"&gt;
&lt;h2&gt;2. Payday 2 - Simon Viklund&lt;/h2&gt;
&lt;p&gt;Similar to Doom, &lt;a class="reference external" href="https://www.overkillsoftware.com/games/payday-2/"&gt;Payday 2's&lt;/a&gt; soundtrack is full of blood pumping tracks to keep you amped while you fly through for loops (or rob a bank, you do you). Unlike Doom's metal approach, however, Payday's songs are more suited for an early 2000's rave, with lots of industrial sound effects and synthesizers.&lt;/p&gt;
&lt;div class="container-fluid"&gt;
    &lt;div class="col-xs-12 col-sm-12 col-md-10 offset-md-1 col-lg-10 offset-lg-1 padding-zero embed-responsive embed-responsive-16by9 mt-4 mb-4"&gt;
            &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/uaP54HhcS8Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Only recently going up on &lt;a class="reference external" href="https://open.spotify.com/album/3vRxcJ43dTDDx5a77ccgxW?si=QkmTOcGlSuuy80MW2AvQUQ"&gt;Spotify&lt;/a&gt;, these tracks are the creations of &lt;a class="reference external" href="https://twitter.com/SimonViklund"&gt;Simon Viklund&lt;/a&gt;, who has since left &lt;a class="reference external" href="https://www.overkillsoftware.com/"&gt;Overkill Software&lt;/a&gt; to make another well received Co-Op shooter, &lt;a class="reference external" href="https://store.steampowered.com/app/493520/GTFO/"&gt;GTFO&lt;/a&gt;. Supposedly Payday 3 is in the works for a &lt;a class="reference external" href="https://www.gameinformer.com/2021/03/19/payday-3-release-set-for-2023-with-new-publishing-deal-18-month-post-launch-support"&gt;2023 release&lt;/a&gt;, but with both Viklund and original game designer Ulf Anderson out of the picture, I'm hard pressed to believe it will capture the charm of the originals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-hat-in-time-pascal-michael-stiefel"&gt;
&lt;h2&gt;1. A Hat in Time - Pascal Michael Stiefel&lt;/h2&gt;
&lt;p&gt;If you need to dedicate a long period of time to focus, look no further than the soundtrack to &lt;a class="reference external" href="https://gearsforbreakfast.com/games/a-hat-in-time/"&gt;A Hat In Time&lt;/a&gt;. Clocking in at over five hours, this is the perfect soundtrack to put on when you want a constant stream of background music without jumping between albums.&lt;/p&gt;
&lt;div class="container-fluid"&gt;
    &lt;div class="col-xs-12 col-sm-12 col-md-10 offset-md-1 col-lg-10 offset-lg-1 padding-zero embed-responsive embed-responsive-16by9 mt-4 mb-4"&gt;
            &lt;iframe src="https://www.youtube.com/embed/2c1iSpk3u1A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Originally released in 2017, this is the only game on the list that I hadn't played before hearing the soundtrack. But after listening to it multiple times, I've picked it up to see just what crazy world all these upbeat tracks exist in.  Standout songs are &lt;a class="reference external" href="https://www.youtube.com/watch?v=wwGnXPpbu4A"&gt;Train Rush&lt;/a&gt; and &lt;a class="reference external" href="https://youtu.be/2c1iSpk3u1A"&gt;Trainwreck of Electro Swing&lt;/a&gt; but you really can't to wrong with any of the tracks that vary from slow and atmospheric, to upbeat and jazzy. Best of all, each song is full-length and fleshed out, instead of being a collection of looping sound bytes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>music</category><category>video games</category><guid>https://www.fotonixx.com/posts/5-video-game-soundtracks-to-jam-out-to-while-coding/</guid><pubDate>Sat, 24 Apr 2021 20:35:11 GMT</pubDate></item><item><title>Rendering Constructive Solid Geometry With Python</title><link>https://www.fotonixx.com/posts/efficient-csg/</link><dc:creator>Ryan Frazier</dc:creator><description>&lt;figure&gt;&lt;img src="https://www.fotonixx.com/images/efficient_csg/preview_image.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;I recently hit a road block with my &lt;a class="reference external" href="https://github.com/rfrazier716/PyRayT"&gt;ray tracer&lt;/a&gt;: cubes, cylinders, and spheres rendered fine, but there wasn't an easy way to create arbitrary shapes whose intersection and normal functions I hadn't already hard coded. Since &lt;a class="reference external" href="https://github.com/rfrazier716/PyRayT"&gt;PyRayT's&lt;/a&gt; end use is for optical design, at the bare minimum it needed a flexible way to create lenses and mirrors. Flipping through Jamis Bucks' &lt;a class="reference external" href="https://pragprog.com/titles/jbtracer/the-ray-tracer-challenge/"&gt;The Ray Tracer Challenge&lt;/a&gt;, it turns out the last chapter &lt;em&gt;Constructive Solid Geometry&lt;/em&gt; (CSG) addressed my needs perfectly! However, Buck's equations for CSG did not blend well with PyRayTs flow of rendering multiple rays at once. Today I'll be covering my own algorithm for adding constructive solid geometry to a ray tracer, as well as its implementation in Python using &lt;a class="reference external" href="https://numpy.org"&gt;NumPy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.fotonixx.com/posts/efficient-csg/"&gt;Read moreâ¦&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>constructive solid geometry</category><category>csg</category><category>numpy</category><category>pyrayt</category><category>python</category><category>ray tracing</category><category>rendering</category><guid>https://www.fotonixx.com/posts/efficient-csg/</guid><pubDate>Mon, 15 Mar 2021 11:35:26 GMT</pubDate></item><item><title>Getting Up and Running with Nikola</title><link>https://www.fotonixx.com/posts/getting-up-and-running-with-nikola/</link><dc:creator>Ryan Frazier</dc:creator><description>&lt;figure&gt;&lt;img src="https://www.fotonixx.com/images/teaser_html.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;I have no background in web development or design, which is probably as good of a disclosure as any when writing a post about deploying a website.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.fotonixx.com/posts/getting-up-and-running-with-nikola/"&gt;Read moreâ¦&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>github</category><category>nikola</category><category>rst</category><guid>https://www.fotonixx.com/posts/getting-up-and-running-with-nikola/</guid><pubDate>Mon, 01 Mar 2021 21:43:38 GMT</pubDate></item></channel></rss>