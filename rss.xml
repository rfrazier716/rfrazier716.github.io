<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fotonix &amp; Gizmo</title><link>https://rfrazier716.github.io/</link><description>Ramblings of an Optical Engineer</description><atom:link href="https://rfrazier716.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:rfrazier716+site@gmail.com"&gt;Ryan Frazier&lt;/a&gt; </copyright><lastBuildDate>Sat, 20 Mar 2021 20:20:46 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Rendering Constructive Solid Geometry With Python</title><link>https://rfrazier716.github.io/posts/efficient-csg/</link><dc:creator>Ryan Frazier</dc:creator><description>&lt;div&gt;&lt;p&gt;I recently hit a road block with my &lt;a class="reference external" href="https://github.com/rfrazier716/PyRayT"&gt;ray tracer&lt;/a&gt;: cubes, cylinders, and spheres rendered fine, but there wasn't an easy way to create arbitrary shapes whose intersection and normal functions I hadn't already hard coded. Since PyRayT's end use is for optical design, at the bare minimum it needed a flexible way to create lenses and mirrors. Flipping through Jamis Bucks' &lt;a class="reference external" href="https://pragprog.com/titles/jbtracer/the-ray-tracer-challenge/"&gt;The Ray Tracer Challenge&lt;/a&gt;, it turns out the last chapter &lt;em&gt;Constructive Solid Geometry&lt;/em&gt; (CSG) addresses my needs perfectly! However, Buck's equations for CSG did not blend well with PyRayTs flow of rendering multiple rays at once. Today I'll be covering my own algorithm for adding constructive solid geometry to a ray tracer, as well as its implementation in Python using &lt;a class="reference external" href="https://numpy.org"&gt;numpy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://rfrazier716.github.io/posts/efficient-csg/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>constructive solid geometry</category><category>csg</category><category>numpy</category><category>pyrayt</category><category>python</category><category>ray tracing</category><category>rendering</category><guid>https://rfrazier716.github.io/posts/efficient-csg/</guid><pubDate>Mon, 15 Mar 2021 11:35:26 GMT</pubDate></item><item><title>Off Axis Elliptical Mirrors</title><link>https://rfrazier716.github.io/posts/off-axis-elliptical-mirrors/</link><dc:creator>Ryan Frazier</dc:creator><description>&lt;p&gt;Write your post here.&lt;/p&gt;</description><guid>https://rfrazier716.github.io/posts/off-axis-elliptical-mirrors/</guid><pubDate>Tue, 09 Mar 2021 00:28:56 GMT</pubDate></item><item><title>Geometric Ray Tracing with Python</title><link>https://rfrazier716.github.io/posts/geometric-ray-tracing-with-python/</link><dc:creator>Ryan Frazier</dc:creator><description>&lt;div&gt;&lt;p&gt;Ray tracing is subset of programming that has always fascinated me. Every time you see a computer generated image, from video games to CAD software, ray tracing took place under the hood. The biggest hurdle I've always found with learning about ray tracers, though, is it's tightly coupled with graphics API's such as openGL and DirectX, and the actual algorithms are abstracted away from the user.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://rfrazier716.github.io/posts/geometric-ray-tracing-with-python/"&gt; …&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>adventures in ray tracing</category><guid>https://rfrazier716.github.io/posts/geometric-ray-tracing-with-python/</guid><pubDate>Sat, 06 Mar 2021 21:51:24 GMT</pubDate></item><item><title>Getting Up and Running with Nikola</title><link>https://rfrazier716.github.io/posts/getting-up-and-running-with-nikola/</link><dc:creator>Ryan Frazier</dc:creator><description>&lt;div&gt;&lt;p&gt;I have no background in web development or design, which is probably as good of a disclosure as any when writing a post about deploying a website. What I do have, however, is a desire to set up a site to share my various projects/software, or at least document it so I don't forget what I was working on 6 months down the road. It needed to be easy to set up, free to host, and give me full control to customize the site and add features as needed (just because I don't currently know web design doesn't mean I won't try to pick it up down the road).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://rfrazier716.github.io/posts/getting-up-and-running-with-nikola/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>github</category><category>nikola</category><category>rst</category><guid>https://rfrazier716.github.io/posts/getting-up-and-running-with-nikola/</guid><pubDate>Mon, 01 Mar 2021 21:43:38 GMT</pubDate></item></channel></rss>